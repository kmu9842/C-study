객체 지형 언어로서의 c++

C언어와 C++의 결정적 차이는 절차지향과 객체지향


클래스의 선언

클래스는 객체의 특성을 정의함. C++에서는 보통 헤더파일에서 선언되고 
상세 정의는 관련 소스파일에서 작성됨

클래스는 클래스 이름을 정의하는것으로 시작되며, 중괄호 안에 속성 데이터를
저장할 멤버 변수들과 클래스의 행동을 조정할 수 있는 매서드들이 선언된다.

접근 권한 세가지
public  - 외부에서 접근 가능
private - 클래스 내부에서만 접근 가능, 상속 접근 불가능
protect - 클래스 내부에서만 접근 가능, 상속 접근 가능

생성자
클래스명과 같은 이름이면서 리턴값이 없는 메서드로,
객체가 생성될 때 자동으로 호출 됨. 
객체를 생성하고 그 값을 초기화 할수 있으며, 스택 객체와 힙 할당 객체 모두 적용 가능.
여러 종류가 잇을 수도 있다.

소멸자
클래스명과 같은 이름이면서 리턴값이 없는 메서드로 앞에 물결무늬가 붙어있으며,
객체가 메모리에서 해제될 때 자동으로 호출 된다.
생성자와는 달리 한 종류만 존재한다.

-> 6장, 7장으로 이어짐



표준 라이브러리

C++는 유용한 클래스를 표준 라이브러리로 제공한다.
표준 라이브러리에 정의된 클래스를 이용하면 중복해서 같은 기능의 클래스를 
개발하는 부담을 피할 수 있다. 뿐만 아니라 표준 라이브러리의 클래스들은
오랜 시간 많은 사람으로부터 검증되었기 때문에 오류의 가능성도 적다.

자주 쓰이는 것으로 앞에서 보았던 std::string과 std::cout클래스,
배열을 대체하는 std::vector가 있다.

-> 11장으로 이어짐 


std::vector

사용 예)
#include <vector>
#include <string>
#include <iostream>

int main(){
	//문자열 백터 객체 생성. C++ 11의 유니폼 초기화를 이용
	vector<string> s = {"A first string","A second string"};
	//백터 클래스의 push_back 함수를 이용해 문자열 추가
	s.push_back("A third string");
	s.push_back("the last string in the vector");
	//반복자를 이용해 벡터의 모든 항목을 순회하며 문자열을 출력
	for (auto& str : myVector){
		cout << str << endl;
	}
	return 0;
}