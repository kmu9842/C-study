코드의 재사용

경험 있는 C++ 프로그래머라면 절대 바닥에서부터 프로젝트를 시작하지 않는다.
대신 표준 템플릿 라이브러리, 오픈소스, 내부적으로 구할 수 있는 코드 자산들 등을
광범위하게 수집하여 재활용한다.


용어 정리

재사용 가능한 코드란?
 - 과거에 직접 작성했던 코드
 - 동료가 작성한 코드
 - 제직 중인 조직 바깥에 있는 협력 업체에서 작성한 코드

재사용 코드의 구성 형태는 다음과 같이 구분될 수 있다.
 - 독립 함수 또는 클래스
   과거 직접 작성했던 코드나 동료가 작성한 코드는 이런 형태일 가능성이 높다.
 - 라이브러리
   라이브러리는 특정 작업을 수행하기 위한 코드의 집합이다.
 - 프레임워크
   프레임워크는 디자인할 프로그램이 연계될 주변 코드들의 집합이다.

애플리케이션 프로그래밍 인터페이스 (API)
 - API는 특정 목적의 라이브러리나 코드를 이용하기 위한 창구 역할을 한다.



코드 재사용의 판단

코드를 재사용한다면 어느 경우든 장점과 함께 단점이 따라오기 때문에 
각 상황에 맞춰서 해야만 한다.

장점
 - 제사용할 코드는 직접 디자인할 필요가 없기 때문에 프로그램 본체의 디자인 작업이 간단해진다.
 - 재사용 코드는 보통 디버깅할 필요가 없다. 왜냐하면 오랫동안 여러 사람이 이용하면서 
   많은 테스트와 수정을 거쳤기 때문이다.
 - 라이브러리는 처음 작성되는 코드와 대비해서 훨씬 더 다양한 문제 상황에 대응할 수 있다.
 - 라이브러리는 잘못된 사용자 입력에 대해서도 대비가 된 경우가 많다.
 - 해당 분야의 전문가가 작성한 코드를 사용하는 것이 그 분야의 비전문가가 작성한 코드보다
   훨씬 더 안전하다.
 - 라이브러리는 계속해서 개선되는 경우가 많다.

단점
 - 직접 작성한 코드만 이용한다면 그 코드가 어떻게 동작하는지 정확히 이해하게 된다. 하지만
   다른 사람이 작성한 라이브러리를 사용하려면 그 인터페이스와 사용법을 배우기 위해 시간을
   투자해야 한다.
 - 코드를 직접 작성하면 필요한 동작에 딱 맞게 동작시킬 수 있다. 하지만 라이브러리 코드는 내가
   원하는 동작과 완전히 같은 기능을 제공하지 않을 수 있다.
 - 필요한 성능이 나오지 않을 수도 있다.
 - 라이브러리의 이용이 유지보수 문제를 일으킬 수도 있다. (라이브러리 자체의 오류)
 - 라이브러리의 라이선스 문제가 있을 수 있다.
 - 라이브러리의 크로스 플랫폼 호환성 문제도 있을 수 있다.
 - 라이브러리를 새 버전으로 업그레이드할 때 문제가 발생할 수 있다.


코드 재사용 전략
어느 경우이든지 간에 코드를 재사용할 때는 따라야 할 원칙들이 있다.
1. 기능과 한계의 이해
   사용할 코드가 어떤 기능을 제공하고 제약 사항은 무엇인지 시간을 들여서 잘 파악하는 것이 중요하다.

2. 성능에 대한 이해
   라이브러리나 제공된 코드가 어떤 수준의 성능을 보증하는지 알아야 한다.
 - Big-O 표기법
   Big-O 표기법은 알고리즘이나 코드가 어떤 성능을 가지는지 설명할 때 사용한다.
   Big-O 표기법은 절대적인 성능이 아니라 상대적인 성능을 나타낸다. = 알고리즘 복잡도

3. 플랫폼 제약 사항의 이해
   사용되는 라이브러리가 어느 플랫폼에서 구동되는지 미리 확인해야 한다.
   
4. 라이선스와 기술지원에 대한 이해
   외부 업체의 라이브러리를 이용하게 되면 복잡한 라이센스 문제에 부딪힌다.

5. 도움 요청 방법 알기
   첫번째로 라이브러리와 관련된 문서들을 살펴볼것
   그곳에서도 찾을 수 없다면 검색엔진을 활용하거나 토론페이지를 찾아볼 것
   그래도 볼 수 없다면 관련 포럼을 찾아 자신이 직접 질문을 올려볼 것

6. 프로토타이핑
   새로운 라이브러리나 프레임워크를 이용할 때 가장 먼저 할일로, 단순한 것이라도 직접 이용해 보면 
   가장 빨리 라이브러리의 기능에 친숙해질 수 있다.


서드파티 애플리케이션의 번들링
프로젝트 하나에 여러 애플리케이션이 포함될 때도 있다. 애플리케이션 번들링은 코드 재사용이
극단적으로 확장된 형태로 볼 수 있다. 애플리케이션을 번들링할 때 고려해야 할 사항은 라이브러리와
크게 다르지 않다.


C++ 표준 라이브러리
C++ 프로그래머 로서 가장 중요한 라이브러리는 C++ 표준 라이브러리이다. -> 11장, 17장

C 표준 라이브러리
C++은 C의 상위집합이기 때문에 C라이브러리 전체를 여전히 포함하고 있다.
C 헤더 파일들은 C++에서 다른 이름을 가지고 있다. 익숙한 것을 사용하고 싶겠지만 가능하면
바뀐 이름을 사용하는 것이 좋다.

STL 사용 여부의 판단
STL은 기능과 성능 그리고 중복되지 않는 것을 우선순위로 하여 디자인 되었다.
STL을 이용하면 여러 가지 큰 이점이 있다. -> 11장, 17장


패턴/테크닉을 이요한 디자인

C++ 언어를 배우는 것과 훌륭한 C++ 프로그래머가 되는 것은 매우 다른 일이다. 
C++ 표준을 모두 암기했다면 누구보다 C++를 잘 알게 될것이다. 하지만 다른 사람의 코드를 보고,
자신이 직접 프로그램을 개발해 보지 못했다면 좋은 프로그래머가 되기 어렵다.
C++ 커뮤니티에서도 큰 맥락에서 언어 활용 방식에 대해 표준적, 비표준 적인 방식들을 구축해 놓았다.
-> 28, 29장



