프로그램 디자인이란?

프로그램 디자인 또는 소프트웨어 디자인은 주어진 기능적, 성능적 요건을 구현하기 위한
아키텍처의 설명서이다. 좀 더 쉽게 말하면 프로그램을 작성하기 위한 계획이다.

소프트웨어 디자인 문서는 일반적으로 통용되는 형태가 있는데, 보통 다음 두 부분을
포함한다.

1. 전체 프로그램을 구성하고 있는 서브시스템들과 각 서브시스템 간의 종속성 및 인터페이스,
   각 서브시스템간의 데이터 흐름과 입출력 그리고 스레드 활용모델을 설명하는 파트
2. 서브시스템별 상세 사항으로, 클래스 구성과 계층도, 데이터 구조, 알고리즘, 
   개별 스레드 활용 모델 그리고 에러 처리 방법을 설명하는 파트

코딩 하기 전에 가능한 한 좋은 디자인을 만들어 두는것이 바람직하다. 교수님이 그렇게 강조하신 것.


프로그램 디자인의 중요성

프로그래머라면 다들 코딩부터 하고 보자는 유혹에 빠지기 쉽다. 하지만 정말 단순한 
프로젝트가 아니라면 나중에 문제가 발생할 가능성이 100%이다.
코딩에 들어가기 전에 디자인 내용을 형식화 하면 각 부분을 어떻게 연결할지 결정하는데 
도움을 준다.


C++ 디자인의 특징

C++ 프로그램의 디자인은 C++의 몇몇 특징 때문에 다른 언어들보다 좀 더 어렵고 복잡하다.
1. C++은 너무나 많은 기능이 있다.
2. C++은 객체지향 언어이다.-> 3장
3. C++은 공용 코드와 재사용 코드를 설계할 수 있는 많은 기능을 제공한다.
4. C++은 유용한 표준 라이브러리를 제공한다.
5. C++언어는 적용 할 수 있는 디자인 패턴이나 공통적인 문제 해결 방식이 많이 존재한다. -> 29장

이러한 이슈들 때문에 C++프로그램을 디자인 하려면 그 방대함에 압도된다.
만약 이러한 이슈들 때문에 제자리를 맴돌 경우 다음 방법 중 하나를 해보자.

1. 도움을 요청한다.
2. 잠깐 다른 일을 한다.
3. 일단 결정을 내리고 다음 사항으로 넘어간다. 다만 그 결정을 문서화 하는 것이 좋다.

 - 좋은 디자인을 만들고 올바르게 수행하는 것은 어려운 일이다. C++ 코딩보다 C++ 디자인을 
   마스터 하는 것이 어렵다는 것을 알게 될 것이다.


C++ 디자인의 두 가지 원칙

C++에는 근간이 되는 디자인 원칙 두가지가 있다. 추상화와 재사용이다.
이 두원칙들은 정말로 중요하다.


추상화

추상화 원칙이란 내부 구현과 외부 인터페이스를 분리하는 것으로, 우리가 텔레비젼의 사용방법은
알아도 텔레비젼이 어떻게 동작하는지 모르지만 이용하는데 문제 없는것과 같다.

추상화의 이점
주어진 코드를 그 구현 내용을 알지 못해도 사용할 수 있다.

추상화 디자인
함수와 클래스를 디자인할 때는 다른 프로그래머가 그 구현 내용을 알 필요가 없도록 해야 한다.
예시)
ChessPiece * cheseBoard[8][8];
...
ChessBoard[0][0] = new Rook();
이러한 방식은 추상화가 성립하지 못한다. 모든 프로그래머가 체스판이 2차원 배열로
구현되었다는 것을 알아야 한다. 인터페이스와 구현이 분리 되지 못했다.
클래스로 만들면 더 좋아진다. 클래스 정의는 인터페이스로서 개방되고 상세 구현 내용은 숨겨진다.

class ChessBard
{
public :
	void setPiceAt(ChesePiece* piece, int x, int y);
	ChessPiece& getPieceAt(int x, int y);
protected :
	// 더이상의 자세한 설명은 생략한다
}

ChessBard의 클래스의 인터페이스는 내부 구현에 대해서 아무런 정보도 주지 않고 있다.
체스판이 2차원 배열로 구현되어 있을 수 있지만, 인터페이스는 그에 대해서 아무런 힌트도 없다.

getPiceAt()함수는 참조형 변수(ChessPiece&)를 리턴하고 있기 때문에 내부 구현 코드들이
벡터와 같은 컬렉션 클래스에 포인터나 스마트 포인터 대신 직접 객체를 저장하는 것은
피하는 것이 좋다. -> 3장, 6장과 7장



재사용

제빵사의 경우 쿠키를 만들 때 재료들을 섞어 굽기 판에 모양을 내고 오븐에 넣고 요리할 것이다.
하지만 제빵사는 밀을 빻아서 밀가루를 만들지도, 쿠키를 굽기 위해서 오븐을 만들지도 않는다.
프로그래머 역시 동일하다. 프로그래머도 일일이 만들지 않고 위에서 도구를 활용했던 것 처럼
이미 만들어 놓은걸 활용하는 경우가 좋다.

코드의 재사용
프로그램을 디자인 할때부터 가능한 경우 기존 코드의 재사용을 고려하여라
많은 프로그래머들이 기존 코드를 잘 활용하지 못한다.

재사용 가능한 코드의 작성
재사용 가능한 디자인은 새로 작성할 코드뿐만 아니라 사용할 기존 코드에도 적용된다. 
프로그램 디자인은 작성될 클래스, 알고리즘, 그리고 데이터 구조에 모드 반영되어야 한다.

C++에서는 범용 코드를 작성할 때 템플릿을 이용할 수 있다. -> 19장


아이디어의 재사용
제빵사의 예에서 그렇듯 빵을 구울 때마다 조리법을 개발하는 것은 터무니 없는 일이다. 
그렇듯이 C++ 프로그래머라면 이미 존재하는 조리법, 디자인 패턴에 익숙해져서 효과적으로
프로그램 디자인에 적용할 수 있어야한다.

유일한 하나의 객체이면서 전역적으로 접근해야 하는 경우가 발쌩할때, 이럴때의 디자인 패턴으로 
싱글톤이라는 패턴이 있다. ->28장과 29장의 디자인 패턴

 