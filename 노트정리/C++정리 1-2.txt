포인터와 동적 메모리

동적 메모리는 컴파일 시점에 크기를 정할 수 없는 데이터를 이용할 수 있게 해준다.


스택과 힙

C++에서 사용하는 메모리는 스택과 힙 두 가지로 나누어진다. 

스택 메모리는 쌓여 있는 카드에 비유할 수 있다.
여기서 가장 위에 놓인 카드는 프로그램의 상태를 나타냄 -> 실행 중인 함수, 그 함수의 로컬 변수가
제일 위에 위치함

스택 프레임은 각 함수 간 메모리 공간을 격리시키는 중요한 역할을 함.
ex)foo()함수에서 bar()함수를 호출하는동안 foo()함수의 로컬 변수들은 변하지 않음.
   bar()함수의 실행이 끝나고 리턴하면 bar()함수의 로컬 변수들은 bar()함수의 스택프레임과 함께 사라짐

힙 메모리는 실행 중인 함수나 스택 프레임과는 완전히 독립적인 메모리 영역이다.
함수의 호출과 리턴에 관계없이 항상 존재해야 하는 변수들이 위치됨.


동적 할당 배열

스택은 동작 방식 대문에 컴파일 시점에 크기가 결정되어야 함.
ex)
int arraysize = 8;
int array[arraysize]; // 컴파일 에러 발생

배열의 크기를 실행 시점에 동적으로 결정해야 한다면 동적 메모리를 이용해 
스택 대신 힙에 배열을 위치시킨다

동적 배열 할당 방법

int* array;
array = new int[arraySize];

new - C언어에서의 malloc()와 유사
new 명령은 파라미터 arraySize만큼 힙 메모리를 확보하여 그 주소 값을 포인터 변수에 대입해준다.
이를 이용해 포인터 변수 자체는 스택에 위치하고 있으나 동적으로 할당된 배열 데이터는 힙에 위치한다.

delete - C언어에서의 free()와 유사
동적으로 할당된 배열을 더는 사용하지 않는다면 수동적으로 힙 메모리에서 해제해야한다.
C++에서는 이 역할을 delete명령을 이용해 해제해 준다.
ex) delete [] array;
대괄호는 해당 메모리가 배열임을 표시해줌

new, new[]와 delete, delet[]는 각각 짝을 맞춰서 이용되어야 메모리 릭을 막을 수 있다.


스마트 포인터

스마트 포인터는 해당 객체에 대한 참조 스코프가 벗어나면 자동으로 메모리 해제를 수행함.
ex) int* array = new int[arraySize];
 -> unique_ptr<int[]> array(new int[arraySize]);


포인터의 이용

어떤 변수든 힙 메모리에 할당 가능함
ex) int *IntagerPointer = new int;

여기서 포인터는 정수 변수 하나가 위치한 주소를 가리킨다.
수를 대입시 포인터 자체는 변하지 않고, 포인터가 가리키는 메모리의 값이 바뀐다.
- 포인터는 이용되기 전에 반드시 메모리가 할당되어 초기화 되어야한다.

& 연산자
변수로부터 포인터를 얻는 연산자.
ex) int i = 8;
    int* p = &i; // 숫자 8을 값으로 가진 변수의 포인터 변수


구조체 참조하기

구조체를 참조하려면 먼저 값에 접근하기 위해 새역참조 연산자 *를 포인터에 붙이고, 이렇게
역참조된 변수에 .을 붙여서 구조체 내 각 필드를 선택한다
ex) Employee* a = getEmployee();
    cout << (*a).salary << endl;

구조체 역참조 연산자(->)를 활용할 경우
ex) Employee* a = getEmployee();
    cout << a->salary << endl;


C++의 문자열

C++에서 문자열을 다루는 데는 세가지 방법이 있다.
1. C언어에서와 같이 Char배열을 활용
2. C++에서 제공하는 string타입을 이용
3. 비표준 방법으로 프로그래머가 타입정의 기능을 이용해 직접 정의

C언어의 문자열

"Hello, World"와 같은 문자열은 내부적으로 널문자가 마지막에 추가된 문자 타입의 배열로 처리된다.
배열 변수와 포인터 변수는 유사한 부분이 있는데, 예로

char array[20] = "Hello, World";
const char pointerString = "Hello, World";

array는 컴파일러가 char 타입의 데이터 20개를 스택에 할당한 후 문자를 채워넣는다. 남은 14번부터
20번까지의 공간은 이전에 사용하던 또는 쓰래기값이 들어간다.

pointString을 처리할 때는 포인터 변수를 저장할 공간만 스택에 할당한다. 
실제 문자열이 담길 메모리는 별도의 문자열 상수 저장 영역에 할당하게 된다.

C++에서의 문자열

C의 answkdufdms C++에서도 자주 사용하기 때문에 알아두는 것이 좋다. 
하지만 C++에서는 string타입을 지원하여 훨씬 더 유연하게 문자열을 이용 할 수 있다.

string타입은 <string>헤더에 정의되어 있으며 기본 타입으로써 이용되며, i/o스트림과 마찬가지로
std네임스페이스 아래에 정의되어 있다.
사용 예)
string myString = "Hello, World";
cout << "The value of string is " << myString << endl;

C++ string타입을 이용하면 연산자로 문자열을 조작할 수 있다. C에서의 문자열은 함수를
이용하여 문자열을 조작했지만, string타입은 직관적인 +연산자로 문자열을 조작 할 수 있으며,
주소값을 비교하여 작동되지 않는 C의 문자열과는 달리 ==연산자로도 문자열을 비교 할 수 있다.

비표준 문자열

C++ 개발자들이 string 타입을 사용하지 않는 경우가 있는데,
1. string타입이 있다는걸 모를경우
2. string타입이 상황에 맞는 동작을 하지 않을 경우
3. 사용하는 개발 프레임워크가 자신만의 문자열을 이용할 경우
이렇게 여러가지 경우들이 있기 때문에, C++프로젝트를 시작 할 경우 어떤
문자열 타입을 사용할지 장기적인 안목으로 고민해야 한다.

이 외의 자세한 문자열 설명은 -> 14장

참조형

함수의 패턴은 보통 파라미터를 받아 계산하고 결과값을 리턴하는 것이다. 
하지만 이러한 패턴이 맞지 않는 경우도 있는데, 리턴하고 싶은 결과 값이 2개 이상일 수도 있고
파라미터로 넘겨진 변수를 함수에서 변경해주길 원할 수도 있다.

이런경우 C에서는 변수 대신 변수의 포인터를 전달하여 해결한다. 이 방법의 유일한 단점은
포인터 조작 때문에 코드가 지저분해진다는 것인데, C++에서는 포인터 없이도 명시적으로
참조에 의한 전달을 지원한다.

방법 - 각 파라미터의 변수앞에 &연산자를 붙여줌
사용법은 보통의 변수와 같으나, 내부적으로는 변수의 포인터가 사용 된다.

예시)
void addOne(int i){
	i++; // 파라미터 변수의 복제본이기 때문에 원래 변수에는 아무런 영향 없음
}

void addOne(int& i){
	i++; // 원본 파라미터 변수의 값이 1증가함
}

이 함수를 호출할때는 정수 변수를 사용하기만 한다면 보통 파라미터 함수든 
참조형 파라미터 함수든 차이가 없다.

int a = 7;
addOne(a);


예외 처리

C++의 exception은 코드의 안정성을 한 단계 높이기 위해 언어 차원에서 제공되는 기능이다.
exception은 예상치 못한 상황을 의미한다.

exception에는 몇 가지 새로운 용어가 도입되었는데, 특정코드가 예외적인 상황을 인지할 경우
exception을 throw한다. 그리고 또 다른 코드가 던져진 exception을 catch한뒤 뒤처리를 한다.
예시)
#include <stdexcept>
double divideNumbers(double a, double b){
	if (a == 0){
		throw std::exception();
	}
	return a/b;
}

throw구문에 이르면 리턴값도 없이 함수의 실행이 즉시 중단된다.

다음 예시와 같이 try/catch로 감싸줬다면 catch에서 뒤처리를 하게 된다.

#include <iostream>
#include <stdexcept>
int main(){
	try {
		std::cout << divideNumbers(2.5,0.5) << std::endl;
		std::cout << divideNumbers(2.3,0) << std::endl;
	}
	catch (const std::exception& exception){
		std::cout << "An exception was caught!" << std::endl;
	}
	return 0;
}
divideNumbers의 두 번째 호출에서 throw가 발생, exception이 발생하여 에러를 출력한다.\


const
const 키워드는 C++에서 여러 목적으로 이용된다.
1. const 상수
 - C++에서는 #define보다 const키워드를 권장.

2. 파라미터 보호
 - C++에서는 const가 아닌 변수를 const로 캐스팅 가능. 이 방법을 사용하면
   특정 코드가 실행되는 동안 의도하지 않게 값이 바뀌는 오류 상황을 알아 낼 수 있음.

3. 참조형 const
 - 불필요한 값의 복제를 피하려는 의도로 사용 되며, 원본의 변조도 막는 효과가 있음.
   참조형 const변수는 객체를 이용할 때 더 중요함. 객체는 정수 기본 타입보다 덩치도 크며
   복제 작업 자체가 부작용을 쉽게 낳기 때문 -> 9장


값 전달

함수를 호출하면서 파라미터 전달을 위해 변수를 인자로 이용할 때 해당 변수의 주소가 아닌 값을
넘기게 됨. 이러한 방법을 "값에 의한 전달"이라고 함.

변수 대신 변수의 주소를 가리키는 포인터를 인자로 전달할 수도 있음. 포인터를 인자로 전달할 경우 
스택 프레임 안에 복사되어 저장되는 것이 변수의 주소가 되기 때문에 그 주소를 역참조 하여 
스택 프레임 밖에 있는 변수의 값을 변경하는 것이 가능해진다. 이것을 "참조에 의한 전달"이라고 한다.
C++에서는 참조형 변수를 지원한다.