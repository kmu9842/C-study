객체를 이용한 디자인

절차적 사고방식이란?

함수를 선형적인 이벤트로 나열하여 코드를 짜는 방식


객체 지향 철학

절차적 접근방법에서 "이 프로그램은 무엇을 하는가?"라는 질문을 던지는것 과는 달리,
객체지향 접근 방법에서는 "실 세계의 객체를 어떻게 모델링 하는가?"라는 질문을 던짐.

객체 지향 프로그래밍은 프로그램을 작업단위가 아니라 물리적 객체단위로 쪼갠다.


클래스

계층, 분류, 유형,을 의미하는 것으로 객체들을 구별한다.
오렌지는 무엇인가? 라는 질문에 오렌지라고 불리는 "특정 유형"을 이야기하게 된다.
클래스는 이렇게 "특정 유형"의 객체를 구별하여 정의한 것을 담는 그릇이다.


컴포넌트

비행기 같은 현실세계의 객체를 살펴보면 작은 컴포넌트들이 모여서 한 객체를 이루고
있음을 쉽게 볼 수 있다. 동체, 제어판, 랜딩 기어, 엔진 등등 수많은 컴포넌트가 있다.
객체 지향 개념에서는 객체들을 이러한 컴포넌트들로 생각할 수 있다.

이는 절차적 프로그래밍에서 복잡한 작업을 작은 절차들로 쪼게는 것과 유사한 개념으로
객체 지향 프로그래밍의 기본적인 아이디어라 할 수 있다.


프로퍼티

프로퍼티는 속성이라는 뜻과 자산이라는 뜻을 모두 가지고 있다.
속성과 자산은 어떤 객체를 다른 것들과 구분시켜 준다. 
오렌지의 예를 들 경우 오렌지는 오랜지색의 빛깔과 고유한 향과 풍미를 지녔는데 
이 두 특징은 프로퍼티이다. 모든 오렌지는 같은 프로퍼티 항목을 가졌지만 그 값은 다르다.
이 오렌지는 진한 빛깔에 달콤하지만 다른 오렌지는 설익은 신맛일수도 있다.


행동

행동은 "이 객체가 무엇을 하는지?" 또는 "이 객체를 이용하면 무엇을 할 수 있는지?"에
대한 답을 준다.

객체 지향 프로그래밍에서는 절차를 이루던 함수들이 객체로 옮겨진다. 객체의 행동과
그들의 연동방식을 정의함으로써 객체 지향 프로그래밍은 코드를 데이터와 연계하여 
연산하는데 훨씬 더 풍부한 메커니즘을 제공한다.

